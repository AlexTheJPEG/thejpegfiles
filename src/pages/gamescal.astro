---
import BaseLayout from "../layouts/BaseLayout.astro";

const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
---

<BaseLayout title="NYTimes Games Calendar" description="Archive and statistics for my NYTimes Games results">
    <div class="text-white">
        <h1 class="text-5xl font-bold mt-20">NYTimes Games Calendar</h1>
        <p class="text-lg mt-4">An archive of and some statistics for my NYTimes Games
            (Wordle, Connections, Strands) results.</p>
        <div class="flex justify-center items-center mt-10">
            <div class="text-white">
                <div class="flex items-center justify-between px-10 py-3 bg-gray-700 rounded">
                    <button id="prevMonth" class="text-white px-10">Previous</button>
                    <div class="flex-1 flex items-center justify-center">
                        <h2 id="currentMonth" class="text-white w-20 text-left"></h2>
                        <h2 id="currentYear" class="text-white w-10 text-right"></h2>
                    </div>
                    <button id="nextMonth" class="text-white px-10">Next</button>
                </div>
            </div>
        </div>
        <div class="grid grid-cols-7 gap-4 mt-6 text-center">
            {daysOfWeek.map(day => <div class="font-bold">{day}</div>)}
        </div>
        <div id="calendar" class="grid grid-cols-7 gap-4 mt-2 text-center"/>
    </div>
</BaseLayout>

<script>
    const currentMonthElement = document.getElementById('currentMonth');
    const currentYearElement = document.getElementById('currentYear');

    let today: Date;
    if (currentMonthElement && currentYearElement) {
        today = new Date();
        currentMonthElement.textContent = today.toLocaleString('en-US', {month: 'long'});
        currentYearElement.textContent = today.getFullYear().toString();
    }

    // Define months array
    const months = ['January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'];

    const renderCalendar = (monthIndex: number, year: number) => {
        const firstDay = new Date(year, monthIndex, 1).getDay();

        const daysInMonth = new Date(year, monthIndex + 1, 0).getDate();
        const prevDaysInMonth = new Date(year, monthIndex, 0).getDate();

        const isCurrentMonth = today.getFullYear() === year && today.getMonth() === monthIndex;

        const calendarElement = document.getElementById('calendar');
        if (!calendarElement) return;

        // Helper function for zero-padding
        const zeroPad = (num: number): string => (num < 10 ? '0' + num : num.toString());

        // Clear previous calendar days
        calendarElement.innerHTML = '';

        // Fill the calendar with previous month's days
        for (let i = firstDay - 1; i >= 0; i--) {
            const prevMonthDayCell = document.createElement('div');
            prevMonthDayCell.className = 'bg-gray-800 py-2 rounded cursor-pointer'; // Dimmer background
            prevMonthDayCell.textContent = (prevDaysInMonth - i).toString();
            prevMonthDayCell.addEventListener('click', () => showModal(`${year}-${zeroPad(monthIndex)}-${zeroPad(prevDaysInMonth - i)}`));
            calendarElement.appendChild(prevMonthDayCell);
        }

        // Fill the calendar with current month's days
        for (let i = 1; i <= daysInMonth; i++) {
            const dayCell = document.createElement('div');
            dayCell.className = 'py-2 rounded cursor-pointer';
            // Highlight the current date blue
            dayCell.className += isCurrentMonth && i === today.getDate() ? ' bg-blue-600' : ' bg-gray-600';
            dayCell.textContent = i.toString();
            dayCell.addEventListener('click', () => showModal(`${year}-${zeroPad(monthIndex + 1)}-${zeroPad(i)}`));
            calendarElement.appendChild(dayCell);
        }

        // Fill the calendar with next month's days
        const totalDisplayedDays = firstDay + daysInMonth;
        const remainingDays = totalDisplayedDays % 7 ? 7 - (totalDisplayedDays % 7) : 0;
        for (let i = 1; i <= remainingDays; i++) {
            const nextMonthDayCell = document.createElement('div');
            nextMonthDayCell.className = 'bg-gray-800 py-2 rounded cursor-pointer'; // Dimmer background
            nextMonthDayCell.textContent = i.toString();
            nextMonthDayCell.addEventListener('click', () => showModal(`${year}-${zeroPad(monthIndex + 2)}-${zeroPad(i)}`));
            calendarElement.appendChild(nextMonthDayCell);
        }
    };

    document.getElementById('nextMonth')?.addEventListener('click', () => {
        if (currentMonthElement && currentYearElement) {
            let currentMonthIndex = months.indexOf(currentMonthElement.textContent ?? '');
            let currentYear = parseInt(currentYearElement.textContent ?? '0');

            // Advance to the next month
            if (currentMonthIndex === 11) {
                currentMonthIndex = 0; // Wrap around to January
                currentYear += 1; // Advance the year
            } else {
                currentMonthIndex += 1;
            }

            // Update the DOM elements with new values
            currentMonthElement.textContent = months[currentMonthIndex];
            currentYearElement.textContent = currentYear.toString();

            // Render the calendar for the new month and year
            renderCalendar(currentMonthIndex, currentYear);
        }
    });

    document.getElementById('prevMonth')?.addEventListener('click', () => {
        if (currentMonthElement && currentYearElement) {
            let currentMonthIndex = months.indexOf(currentMonthElement.textContent ?? '');
            let currentYear = parseInt(currentYearElement.textContent ?? '0');

            // Go back to the previous month
            if (currentMonthIndex === 0) {
                currentMonthIndex = 11; // Wrap around to December
                currentYear -= 1; // Roll back the year
            } else {
                currentMonthIndex -= 1;
            }

            // Update the DOM elements with new values
            currentMonthElement.textContent = months[currentMonthIndex];
            currentYearElement.textContent = currentYear.toString();

            // Render the calendar for the new month and year
            renderCalendar(currentMonthIndex, currentYear);
        }
    });

    // Create a modal element
    const modalElement = document.createElement('div');
    modalElement.id = 'dateModal';
    modalElement.style.display = 'none'; // Hide by default
    modalElement.className = 'fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center';
    modalElement.innerHTML = `
            <div class="bg-white rounded p-4 text-black">
                <p id="modalDate"></p>
                <button id="closeModal" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded">Close</button>
            </div>
        `;
    document.body.appendChild(modalElement);

    const showModal = (date: string) => {
        const modalDateElement = document.getElementById('modalDate');
        if (modalDateElement) {
            modalDateElement.textContent = `${date}`;
        }
        modalElement.style.display = 'flex';
    };

    const closeModal = () => {
        modalElement.style.display = 'none';
    };

    const closeModalButton = document.getElementById('closeModal');
    closeModalButton?.addEventListener('click', closeModal);

    // Initial render for the current month and year
    renderCalendar(new Date().getMonth(), new Date().getFullYear());
</script>